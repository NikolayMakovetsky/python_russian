Урок от Python Russian

В продолжение беседы о конкурентости и параллельности в Python,
пришла пора посмотреть на модный молодежный asyncio

Асинхронное выполнение подходит для IO-bound задач, работает РОВНО 1 ПОТОК !!!

I/O-Bound задачи. ("Задачи связанные с вводом/выводом")
Задачи, ориентированные на ввод/вывод,
предполагают считывание данных или запись их на устройство, в файл или в сокет.
Соответственно, это операции над входящими и исходящими данными,
и скорость этих операций ограничена возможностями устройства,
скоростью чтения/записи с жесткого диска или скоростью сетевого соединения.

Сокет — это абстракция, представляющая собой конечную точку сетевого соединения.
Для обмена данными между двумя программами через сеть необходимо создать два сокета:
один на стороне клиента и один на стороне сервера.
Существует два основных типа сокетов:
TCP-сокеты (Transmission Control Protocol)
обеспечивают надёжное соединение между двумя устройствами.
Обычно используются в веб-серверах и клиентах, почтовых серверах и других приложениях,
где требуется надёжность и порядок доставки данных.

UDP-сокеты (User Datagram Protocol)
обеспечивают передачу данных без установления соединения.
Обычно используются в видео- и аудиопотоковых приложениях,
играх и других приложениях, где скорость важнее, чем надёжность.

Плюсы:
+ скорость и экономия времени, вместо x + y + z =  max(x, y, z)
+ управляемость
+ меньше потребление ресурсов (в сравнении с потоками)

Минусы:
 - "умирает" из-за одного блокирующего вызова (!)
   Таким блокирующим вызовом м.б. например запрос страницы сайта (!),
   если по каким-то причинам сайт не недоступен
   (request будет ждать тайм аута порядка 30 сек)
- event loop "не резиновый"! Точнее накидать туда задач можно сколько угодно,
  но в какой-то момент их станет так много, что эффективность потеряется
  Пример: гроссмейстер, который играет с 10 игроками и с 1000 игроками
- любая корутина - это также объект питона, который забирает память (не забывай)
- не безразмерный, нужно понимать, что корутины не бесплатные

Корутины (coroutines) или сопрограммы — это блоки кода,
которые работают асинхронно, то есть по очереди.

важные принципы:
1) корутина работает как генератор
2) async - явный флаг, что данная функция является асинхронной (корутиной)
3) await - явный флаг, что в это месте функция встает на паузу и дает работать другим,
    пока ждет свои данные
4) event loop - цикл событий, механизм,
    который отвечает за планирование и запуск корутин.
    Можно представить как список/очередь,
    из которого в вечном цикле достаются и запускаются корутины

Частые ошибки:
- не использование await внутри корутины
- создание корутины, но использование ее, как функции
- использование внутри корутин синхронного(блокирующего) кода, в том числе IO