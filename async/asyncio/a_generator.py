import asyncio
import aiohttp
import requests
import time


def gen(): # функция-генератор умеет вставать на паузу
    x = 10
    print(x)
    yield x


async def example(): # корутина работает как генератор
    print(100)
    print(100)
    print(100)
    print(100)
    # данная корутина не совсем "честная", так как внутри мы не вызываем await
    # при таком подходе к корутине, она став активной в event loop будет выполнятся
    # до самого конца, не давая возможность выполнится другим корутинам



if __name__ == "__main__":
    print(gen())        # print(x) не выполнилось, а вернулся объект-генератор!
    print(example())    # print(100) не выполнилось, а вернулся объект-корутина!
    # МЫ СЕЙЧАС ДОПУСТИЛИ ОШИБКУ: создание корутины, но использование ее, как функции