Продолжая тему конкурентности и параллелизма посмотрим на старые добрые потоки.

multithreading - многопоточность, подходит для IO-bound задач,
использует ОС, страдает от GIL (важно помнить)

GIL (Global Interpreter Lock) - это особенность интерпретатора Python,
которая ограничивает одновременное выполнение
нескольких потоков Python-кода в одном процессе.
Это ограничение может стать вызовом для разработчиков, особенно тех,
кто сталкивается с многозадачностью и параллельной обработкой данных.
GIL - это мьютекс, который действует как ограничитель,
позволяющий только одному потоку выполнять байткод Python в один момент времени.
Это означает, что в многозадачной среде Python,
в один и тот же момент времени только один поток может активно выполнять Python-код.
Важно отметить, что GIL существует на уровне интерпретатора Python
и не зависит от операционной системы.
Поэтому, даже если ваша операционная система поддерживает многозадачность,
GIL может ограничивать использование нескольких ядер процессора.


Полезно для ускорения выполнения задач или для того,
чтобы текущий поток занялся другой задачей

Любая программа это минимум один процесс и один поток

Полезно использовать daemon=True, очереди, pool exeсutor,
НО в любом случае все зависит от программиста!

Плюсы:
 + просто(сравнительно)
 + быстро
 + не умирает из-за одного(!)
 + в отличие от asyncio не нужно писать специальных корутин
 + Функциональное программирование заточено под многопоточку
 Минусы:
 - потребление ресурсов (ОС)
 - неуправляемость (старт, приостановка, переключение)
   Мы не управляем тем какой поток и когда работает
 - проблемы потоков (гонка, блокировки)

